/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Dec 11 2022 15:40:05 GMT+0000 (Coordinated Universal Time).
 */

define(['jointjs', 'css!./styles/SimPetriNetWidget.css'], function () {
    'use strict';

    var WIDGET_CLASS = 'sim-petri-net';

    function SimPetriNetWidget(logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;

        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    }

    SimPetriNetWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        this._jointSM = new joint.dia.Graph;
        this._jointPaper = new joint.dia.Paper({
            el: this._el,
            width : width,
            height: height,
            model: this._jointSM,
            interactive: false
        });

        // add event calls to elements
        this._jointPaper.on('element:pointerdblclick', function(elementView) {
            const currentElement = elementView.model;
            // console.log(currentElement);
            if (self._webgmeSM) {
                // console.log(self._webgmeSM.id2state[currentElement.id]);
                self._setCurrentState(self._webgmeSM.id2state[currentElement.id]);
            }
        });

        this._webgmeSM = null;
    };

    SimPetriNetWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    SimPetriNetWidget.prototype.resetMachine = function () {
      let pn = this._webgmePetriNet.init;
      this.initPetriNet(pn);
    };

    SimPetriNetWidget.prototype._decorateMachine = function() {
      this.updateEnabledTransitionStatus()
    };

    SimPetriNetWidget.prototype._setCurrentState = function(newCurrent) {
        this._webgmePetriNet.current = newCurrent;
        this._decorateMachine();
    };

    // Adding/Removing/Updating items
    SimPetriNetWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }

            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
                desc.childrenIds.length + ' ' + label + '.';

            this._el.append(node);
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    SimPetriNetWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    SimPetriNetWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    SimPetriNetWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    SimPetriNetWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimPetriNetWidget.prototype.destroy = function () {
    };

    SimPetriNetWidget.prototype.onActivate = function () {
        this._logger.debug('SimPetriNetWidget has been activated');
    };

    SimPetriNetWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimPetriNetWidget has been deactivated');
    };

    return SimPetriNetWidget;
});
